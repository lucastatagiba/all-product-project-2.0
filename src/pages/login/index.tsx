import { KeyboardEvent, useEffect, useState } from 'react';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { parseCookies } from 'nookies';
import {
  Box,
  Button,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Icon,
  Input,
  InputGroup,
  InputRightElement,
  Text,
  useToast,
} from '@chakra-ui/react';
import { AiFillEye, AiFillEyeInvisible } from 'react-icons/ai';
import { useUserContext } from 'src/context/authProvider';
import { AUTH_STORAGE_KEY, IAuthState } from 'src/utils/storage';
import { apiWithAuth, routes } from 'src/services';

type InputValue = {
  email: string;
  password: string;
};

const Login = ({ invalidLogin }: { invalidLogin: boolean }) => {
  const { handleLogin } = useUserContext();
  const [inputValue, setInputValue] = useState({} as InputValue);
  const [loginError, setLoginError] = useState<string>();
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const toast = useToast();

  const hasInputValue = inputValue.email?.length && inputValue.password?.length;
  const hasLoginError = !!loginError?.length;

  useEffect(() => {
    if (!invalidLogin) return;
    if (!toast.isActive('expiredToken') && !toast.isActive('notLogged')) {
      toast({
        description: 'Você precisa logar antes de acessar essa rota.',
        status: 'error',
        duration: 4000,
        position: 'top-right',
        containerStyle: { color: 'white' },
        isClosable: true,
        id: 'notLogged',
      });
    }
  }, [invalidLogin, toast]);

  const submitLogin = async () => {
    try {
      setIsLoading(true);
      const { data } = await apiWithAuth.post<IAuthState>(routes.auth.login, {
        email: inputValue.email,
        password: inputValue.password,
      });

      handleLogin(data);
    } catch (error) {
      setLoginError('Email ou senha inválidos');
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeypress = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      submitLogin();
    }
  };

  return (
    <Flex
      flexDirection='column'
      alignItems='center'
      w={300}
      h={400}
      bg='blackAlpha.700'
      margin='100px auto'
      gap={5}
      borderRadius={5}
    >
      <Head>
        <title>All product project</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/shoppingcart_80945.png' />
      </Head>
      <Text fontWeight='700' fontSize={30} mt={10} color='gray.300'>
        Login
      </Text>
      <FormControl
        isInvalid={!!loginError?.length}
        color='gray.300'
        isRequired
        onSubmit={submitLogin}
      >
        <Flex flexDirection='column' alignItems='center'>
          <Box w='90%'>
            <FormLabel>Email:</FormLabel>
            <Input
              value={inputValue.email}
              onKeyDown={handleKeypress}
              placeholder='Insira seu email'
              _placeholder={{
                color: 'gray',
              }}
              bg='blackAlpha.400'
              name='email'
              type='email'
              onChange={(e) => {
                setLoginError('');
                setInputValue((old) => ({ ...old, email: e.target.value }));
              }}
            />
          </Box>
          <Box w='90%' mt={8}>
            <FormLabel>Password:</FormLabel>
            <InputGroup>
              <Input
                value={inputValue.password}
                onKeyDown={handleKeypress}
                placeholder='Insira sua senha'
                _placeholder={{
                  color: 'gray',
                }}
                bg='blackAlpha.400'
                name='password'
                type={showPassword ? 'text' : 'password'}
                onChange={(e) => {
                  setLoginError('');
                  setInputValue((old) => ({
                    ...old,
                    password: e.target.value,
                  }));
                }}
              />

              <InputRightElement width='2rem' mr='5px'>
                <Icon
                  h='2rem'
                  w='1.5rem'
                  cursor='pointer'
                  color='gray.300'
                  as={showPassword ? AiFillEyeInvisible : AiFillEye}
                  onClick={() => setShowPassword(!showPassword)}
                />
              </InputRightElement>
            </InputGroup>
          </Box>

          <Box height={4}>
            {!hasInputValue ? (
              <FormErrorMessage>
                Os campos acima são obrigatórios!
              </FormErrorMessage>
            ) : (
              hasLoginError && <FormErrorMessage>{loginError}</FormErrorMessage>
            )}
          </Box>

          <Button
            isLoading={isLoading}
            onClick={submitLogin}
            mt={10}
            colorScheme='blackAlpha'
            type='submit'
            color='gray.300'
          >
            Login
          </Button>
        </Flex>
      </FormControl>
    </Flex>
  );
};

export default Login;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { [AUTH_STORAGE_KEY]: token } = parseCookies(ctx);

  if (token) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    };
  }

  return {
    props: ctx.query,
  };
};
