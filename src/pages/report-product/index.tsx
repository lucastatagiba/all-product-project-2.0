import { useEffect, useMemo } from 'react';
import { GetServerSideProps } from 'next';
import { parseCookies } from 'nookies';
import Head from 'next/head';
import { Button, Flex, Text } from '@chakra-ui/react';
import { IRowStyle, Table } from 'src/components/Table';
import { useUserContext } from 'src/context/authProvider';
import { useRouter } from 'next/router';
import { useReportContext } from 'src/context/reportProvider';
import Header from 'src/components/header';
import { AUTH_STORAGE_KEY } from 'src/utils/storage';

const titles = [
  { title: 'Produto', value: '' },
  { title: 'Quantidade', value: '' },
  { title: 'Valor unitário', value: '' },
  { title: 'Preço Total', value: '' },
];

const Report = () => {
  const router = useRouter();
  const { isAdmin } = useUserContext();

  const { transactions, fetchTransactions } = useReportContext();

  useEffect(() => {
    if (!isAdmin) {
      router.push('/');
      return;
    }
    fetchTransactions();
  }, [fetchTransactions, isAdmin, router]);

  const rowStyles = useMemo<IRowStyle[]>(() => {
    if (!transactions.length) return [];
    return transactions.map((_, index) => ({
      rowIndex: index,
      styles: {
        fontSize: 18,
        fontWeight: 700,
      },
    }));
  }, [transactions]);

  const tableContent = useMemo(() => {
    if (!transactions.length) return [];
    return transactions.map((transaction) => {
      const { id, quantity, cost, product } = transaction;
      return [
        <Text key={id}>{product.name}</Text>,
        <Text key={id}>{quantity}</Text>,
        <Text key={id}>{product.cost}</Text>,
        <Text key={id}>R$ {cost * quantity},00</Text>,
      ];
    });
  }, [transactions]);

  if (!isAdmin) return null;

  return (
    <>
      <Head>
        <title>All product project</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/shoppingcart_80945.png' />
      </Head>

      <Header
        leftContentHeader={`Quantidade Total: [${transactions.reduce(
          (acc, transaction) => transaction.quantity + acc,
          0
        )}]`}
      />

      <Table
        content={tableContent}
        titlesAndValues={titles}
        titles={titles.map((title) => title.title)}
        rowsStyles={rowStyles}
        height='400px'
      />
      <Flex justifyContent='center'>
        <Button colorScheme='blackAlpha' onClick={() => router.push('/pdf')}>
          Gerar PDF
        </Button>
      </Flex>
    </>
  );
};
export default Report;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { [AUTH_STORAGE_KEY]: token } = parseCookies(ctx);

  if (!token) {
    return {
      redirect: {
        destination: '/login?invalidLogin=true',
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
};
